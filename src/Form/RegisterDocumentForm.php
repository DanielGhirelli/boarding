<?php


namespace App\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Form\FormView;
use Symfony\Component\OptionsResolver\OptionsResolver;

class RegisterDocumentForm extends AbstractType
{

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('processing1', FileType::class, array(
                'required' => false,
                'mapped' => false,
                'attr' => array('class' => 'filesize')
                ))
            ->add('processing2', FileType::class, array(
                'required' => false,
                'mapped' => false,
                'attr' => array('class' => 'filesize')))
            ->add('processing3', FileType::class, array(
                'required' => false,
                'mapped' => false,
                'attr' => array('class' => 'filesize')))
            ->add('bank1', FileType::class, array(
                'required' => false,
                'mapped' => false,
                'attr' => array('class' => 'filesize')))
            ->add('bank2', FileType::class, array(
                'required' => false,
                'mapped' => false,
                'attr' => array('class' => 'filesize')))
            ->add('bank3', FileType::class, array(
                'required' => false,
                'mapped' => false,
                'attr' => array('class' => 'filesize')))
            ->add('voidCheck', FileType::class, array(
                'mapped' => false,
                'attr' => array('class' => 'filesize')))
            ->add('businessLicense', FileType::class, array(
                'required' => false,
                'mapped' => false,
                'attr' => array('class' => 'filesize')))
            ->add('extra1Type', ChoiceType::class, array(
                'mapped' => false,
                'choices'  => array(
                    'Business Financial Statement' => 'businessStatement',
                    'Gov. Entity Articles of Incorporation' => 'governmentArticles',
                    'Tax Return' => 'taxReturn'
                ),
                'attr' => array('class' => 'form-control input-sm', 'style' => 'width: 270px; height: 26px; display: inline; margin: 15px 10px 15px 0;')
            ))
            ->add('extra1', FileType::class, array(
                'required' => false,
                'mapped' => false,
                'attr' => array('class' => 'filesize')))
            ->add('Save', SubmitType::class, array(
                'label' => 'Submit',
                'attr' => array('class' => 'btn btn-primary btn-block')
            ))
            ->add('step', HiddenType::class, array(
                'data' => 'register_complete'
            ))
        ;
    }

    public function finishView(FormView $view, FormInterface $form, array $options)
    {
        parent::finishView($view, $form, $options); // TODO: Change the autogenerated stub

        $acceptAch = $form->getData()->getAcceptAch();
        $acceptCC = $form->getData()->getAcceptCC();
        $currentlyCC = $form->getData()->getCurrentlyProcessingCc();

        if ("y" == $acceptAch || ("y" == $acceptCC && "y" != $currentlyCC)) {
            $view['bank1']->vars['show'] = true;
            $view['bank2']->vars['show'] = true;
            $view['bank3']->vars['show'] = true;
        }
        if ("y" == $acceptCC)
        {
            $view['extra1']->vars['show'] = true;
            $view['businessLicense']->vars['show'] = true;

            if("y" == $currentlyCC)
            {
                $view['processing1']->vars['show'] = true;
                $view['processing2']->vars['show'] = true;
                $view['processing3']->vars['show'] = true;
            }
        }
    }


    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'validation_groups' => array(
                'grp_document',
            ),
        ));
    }
}